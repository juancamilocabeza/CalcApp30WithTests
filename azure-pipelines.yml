#1. DISPARADOR

trigger:
- master

#2. AGENTE
pool:
  vmImage: 'windows-latest'

#3. VARIABLES
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

#4. ADMINISTRADOR DE PAQUETES
steps:
- task: NuGetToolInstaller@1

#5. RESTAURO DEPENDENCIAS PROPIAS*
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

#5. CONSTRUCCIÃ“N O BUILD
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#6. EJECUTAR PRUEBAS
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

#7. PUBLICAR RESULTADO DE LAS PRUEBAS*
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: DotNetCoreCLI
    testResultsFiles: '**/*.trx'

#8. CREAR ARTEFACTO    
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

#9. PUBLICAR ARTEFACTO  
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'CalcApp'